#!/usr/bin/env python3

import ezb

import argparse
import itertools
import os
import pathlib
import sys
import time


def parse_args():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-f", "--file",
            help="post file to convert to html")
    group.add_argument("-a", "--all",
            action="store_true",
            help="convert all .md files in thoughts_md to html")
    parser.add_argument("-c", "--continuous",
            action="store_true",
            help="continuously build this file every time it changes")

    return parser.parse_args(sys.argv[1:])


def generate_file(input_file, output_file):
    print(f"Generating {output_file}")
    html = ezb.to_html(input_file)
    with open(output_file, "w") as out:
        out.write(html)
    print()


def generate_files():
    for input_dir, _, files, in os.walk("thoughts_md/"):
        input_dir = pathlib.Path(input_dir)
        output_dir = pathlib.Path("thoughts/", *input_dir.parts[1:])
        for file in map(pathlib.Path, files):
            if file.suffix != ".md":
                print(f"skipping {file}...")
                continue
            input_file = pathlib.Path(input_dir, file)
            output_file = pathlib.Path(output_dir, f"{file.stem}.html")
            generate_file(input_file, output_file)


def main():
    args = parse_args()

    if args.continuous:
        loop = itertools.count()
    else:
        loop = range(1)

    for i in loop:
        try:
            if args.file:
                output_file = f"{os.path.splitext(args.file)[0]}.html"
                generate_file(args.file, output_file)
            elif args.all:
                if os.path.isdir("thoughts/") and os.path.isdir("thoughts_md/"):
                    generate_files()
                    print("Generating toc...")
                    ezb.toc.generate_toc("thoughts_md/thoughts.hjson", "thoughts.html")
                else:
                    print("could not find 'thoughts_md/' folder in current directory")
            else:
                print("No action done.")
        except Exception as e:
            raise
        time.sleep(1)


if __name__ == "__main__":
    main()
